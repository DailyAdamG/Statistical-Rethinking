install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("jsonlite",type="source")
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
install.packages(c("coda", "mvtnorm", "devtools", "dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "dagitty"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("rmcelreath/rethinking")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("rmcelreath/rethinking")
remove.packages(rlang)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("rmcelreath/rethinking")
1
pos <- replicate(1000, sum(runif(16, -1, 1)))
hist(pos)
plot(density(pos))
prod(1 + runif(12, 0, 0.1))
growth <- replicate(10000, prod(1 + runif(12, 0, 0.1)))
dens(growth, norm.comp = TRUE)
library(rethinking)
growth <- replicate(10000, prod(1 + runif(12, 0, 0.1)))
dens(growth, norm.comp = TRUE)
big <- replicate(10000, prod(1 + runif(12, 0, 0.5)))
small <- replicate(10000, prod(1 + runif(12, 0, 0.1)))
dens(big)
dens(small)
log.big <- replicate(10000, log(prod(1 + runif(12, 0, 0.5))))
dens(log.big)
dens(big, norm.comp = TRUE)
dens(small, norm.comp = TRUE)
dens(log.big, norm.comp = TRUE)
w <- 6
n <- 9
p_grid <- seq(from = 0, to = 1, length.out = 100)
posterior(dbinom(w, n, p_grid) * dunif(p_grid, 0, 1))
posterior <- posterior / sum(posterior)
w <- 6
n <- 9
p_grid <- seq(from = 0, to = 1, length.out = 100)
posterior <- dbinom(w, n, p_grid) * dunif(p_grid, 0, 1)
posterior <- posterior / sum(posterior)
posterior
dens(posterior)
library(rethinking)
data(Howell1)
d <- Howell1
str(d)
precis(d)
precis(d, hist = FALSE)
d$height
d2 <- d[d$age >= 18, ]
View(d2)
d2$height
dens(d2$height)
curve(dnorm(x, 178, 20), from =100, to = 250)
curve(dunif(x, 0, 50), from = -10, to = 60)
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
dens(d2$height)
sample_mu <- rnorm(1e4, 178, 100)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
mu.list <- seq(from = 150, to = 160, length.out = 100)
sigma.list <- seq(from = 7, to = 9, length.out = 100)
post <- expand.grid(mu = mu.list, sigma = sigma.list)
post$LL <- sapply(1:nrow(post), function(i) sum(
dnorm(d2$height, post$mu[i], post$sigma[i], log = TRUE)))
post$prod <- post$LL + dnorm(post$mu, 178, 20, TRUE) +
dunif(post$sigma, 0, 50, TRUE)
post$prob <- exp(post$prod - max(post$prod))
contour_xyz(post$mu, post$sigma, post$prob)
image_xyz(post$mu, post$sigma, post$prob)
sample.rows <- sample(1:nrow(post), size = 1e4, replace = TRUE, prob = post$prob)
sample.mu <- post$mu[sample.rows]
sample.sigma <- post$sigma[sample.rows]
plot(sample.mu, sample.sigma, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.1))
dens(sample.mu)
dens(sample.sigma)
PI(sample.mu)
PI(sample.sigma)
d3 <- sample(d2$height, size = 20)
mu.list <- seq(from = 150, to = 170, length.out = 200)
sigma.list <- seq(from = 4, to = 20, length.out = 200)
post2 <- expand.grid(mu = mu.list, sigma = sigma.list)
post2$LL <- sapply(1:nrow(post2), function(i) sum(
dnorm(d3, mean = post2$mu[i], sd = post2$sigma[i], log = TRUE)))
post2$prod <- post2$LL + dnorm(post2$mu, 178, 20, TRUE) +
dunif(post2$sigma, 0, 50, TRUE)
post2$prob <- exp(post2$prod - max(post2$prod))
sample2.rows <- sample(1:nrow(post2), size = 1e4, replace = TRUE, prob = post2$prob)
sample2.mu <- post2$mu[sample2.rows]
sample2.sigma <- post2$sigma[sample2.rows]
plot(sample2.mu, sample2.sigma, cex = 0.5, col = col.alpha(rangi2, 0.1),
xlab = "mu", ylab = "sigma", pch = 16)
dens(sample2.sigma, norm.comp = TRUE)
#R code 4.26
#Loading the data and selecting only adults
data("Howell1")
d <- Howell1
d2 <- d[d$age >= 18,]
flist <- alist(height ~ dnorm(mu, sigma),
mu ~ dnorm(178, 20),
sigma ~ dunif(0, 50))
View(flist)
m4.1 <- quap(flist, data = d2)
precis(m4.1)
start <- list(
mu = mean(d2$height),
sigma = sd(d2$height)
)
m4.1 <- quap(flist, data = d2, start = start)
m4.2 <- quap(
alist(height ~ dnorm(mu, sigma),
mu ~ dnorm(178, 0.1),
sigma ~ dunif(0, 50)), data =d2)
precis(m4.2)
vcov(m4.1)
diag(vcov(m4.1))
cov2cor(vcov(m4.1))
#R code 4.34
#Extract samples from multi-dimensional posterior
post <- extract.samples(m4.1, n = 1e4)
head(post)
precis(post)
precis(post, hist = FALSE)
precis(m4.1)
plot(post)
library(MASS)
post <- mvrnorm(n = 1e4, mu = coef(m4.1), Sigma = vcov(m4.1))
data("Howell1")
d <- Howell1
d2 <- d[d$age >= 18,]
plot(d2$height ~ d2$weight)
set.seed(2971)
N <- 100 # 100 lines
a <- rnorm(N, 178, 20)
b <- rnorm(N, 0, 10)
plot(NULL, xlim = range(d2$weight), ylim = c(-100, 400),
xlab = "weight", ylab = "height")
abline(h = 0, lty = 2)
abline(h = 272, lty = 1, lwd = 0.5)
mtext("b ~ dnorm(0, 10)")
xbar <- mean(d2$weight)
for(i in 1:N) curve(a[i] + b[i] * (x - xbar),
from = min(d2$weight), to = max(d2$weight), add = TRUE,
col = col.alpha("black", 0.2))
b <- rlnorm(1e4, 0, 1)
dens(b, xlim = c(0, 5), adj = 0.1)
set.seed(2971)
N <- 100 # 100 lines
a <- rnorm(N, 178, 20)
b <- rlnorm(N, 0, 1)
plot(NULL, xlim = range(d2$weight), ylim = c(-100, 400),
xlab = "weight", ylab = "height")
abline(h = 0, lty = 2)
abline(h = 272, lty = 1, lwd = 0.5)
mtext("b ~ dnorm(0, 10)")
xbar <- mean(d2$weight)
for(i in 1:N) curve(a[i] + b[i] * (x - xbar),
from = min(d2$weight), to = max(d2$weight), add = TRUE,
col = col.alpha("black", 0.2))
#Setting directory
setwd("C:/Users/daily/Desktop/Repositories/Statistical-Rethinking/Chapter 5")
#Loading necessary library
library(rethinking)
#R code 5.1
#Load data and standardize the variables of interest
#load data and copy
data("WaffleDivorce")
d <- WaffleDivorce
#standardize variables
d$D <- standardize(d$Divorce)
d$M <- standardize(d$Marriage)
d$A <- standardize(d$MedianAgeMarriage)
################################################################################
#R code 5.2
#Standard deviation of age at marriage
sd(d$MedianAgeMarriage)
################################################################################
#R code 5.3
#Compute the approximate posterior
m5.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bA * A,
a ~ dnorm(0, 0.2),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)), data = d)
################################################################################
#R code 5.4
#Simulate from the priors
set.seed(10)
prior <- extract.prior(m5.1)
mu <- link(m5.1, post = prior, data = list(A = c(-2, 2)))
plot(NULL, xlim = c(-2, 2), ylim = c(-2, 2))
for(i in 1:50) lines(c(-2, 2), mu[i,], col = col.alpha("black", 0.4))
################################################################################
#R code 5.5
#Calculate posterior predictions
#compute percentile interval of mean
A_seq <- seq(from = -3, to = 3.2, length.out = 30)
mu <- link(m5.1, data = list(A = A_seq))
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
#plot it all
plot(D ~ A, data = d, col = rangi2)
lines(A_seq, mu.mean, lwd = 2)
shade(mu.PI, A_seq)
################################################################################
#R code 5.6
#Fit a similar regression for marriage rate
m5.2 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM * M,
a ~ dnorm(0, 0.2),
bM ~ dnorm(0, 0.5),
sigma ~ dexp(1)), data = d)
################################################################################
#R code 5.7
library(dagitty)
dag5.1 <- dagitty("dag{A -> D; A -> M; M -> D}")
coordinates(dag5.1) <- list(x = c(A = 0, D = 1, M = 2), y = c(A = 0, D = 1, M = 0))
drawdag(dag5.1)
DMA_dag2 <- daggity('dag{D <- A; A -> M}')
impliedConditionalIndependencies(DMA_dag2)
DMA_dag2 <- daggity('dag{D <- A -> M}')
impliedConditionalIndependencies(DMA_dag2)
DMA_dag2 <- daggity("dag{D <- A -> M}")
impliedConditionalIndependencies(DMA_dag2)
DMA_dag2 <- daggity("dag{D <- A -> M}")
DMA_dag2 <- dagity("dag{D <- A -> M}")
impliedConditionalIndependencies(DMA_dag2)
DMA_dag2 <- dagitty("dag{D <- A -> M}")
impliedConditionalIndependencies(DMA_dag2)
DMA_dag1 <- dagitty("dag{D <- A -> M -> D}")
impliedConditionalIndependencies(DMA_dag1)
m5.3 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM * M + bA * A,
a <- dnorm(0, 0.2),
bM <- dnorm(0, 0.5),
bA <- dnorm(0, 0.5),
sigma <- dexp(1)), data = d)
precis(m5.3)
plot(coeftab(m5.1, m5.2, m5.3), par = c("bA", "bM"))
N <- 50 #number of simulated States
age <- rnorm(N) # sim A
mar <- rnorm(N, -age) #sim A -> M
div <- rnorm(N, age) #sim A -> D
m5.4 <-
quap(
alist(
M ~ dnorm(mu, sigma),
mu <- a + bAM * A,
a ~ dnorm(0, 0.2),
bAM ~ dnorm(0, 0.5),
sigma ~ dexp(1)), data = d)
View(m5.4)
?link
mu <- link(mu, 2, mean)
mu_mean <- apply(mu, 2, mean)
mu_resid <- d$M - mu_mean
mu <- link(mu, 2, mean)
mu <- link(m5.4)
mu_mean <- apply(mu, 2, mean)
mu_resid <- d$M - mu_mean
#R code 5.15
#Simulating predictions averaging over the posterior
#call link without specifying new data so it uses the original data
mu <- link(m5.3)
#summarize samples across cases
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI)
#simulate observations
#again no new data, so uses original data
D_sim <- sim(m5.3, n = 1e4)
D_PI <- apply(D_sim, 2, PI)
plot(mu_mean ~ d$D, col = rangi2, ylim = range(mu_PI),
xlab = "Observed divorce", "Predicted divorce")
abline(a = 0, b = 1, lty = 2)
for(i in 1:nrow(d)) lines(rep(d$D[i], 2), mu_PI[,i], col = rangi2)
#R code 5.16
#Plot the predictions against the observed data
plot(mu_mean ~ d$D, col = rangi2, ylim = range(mu_PI),
xlab = "Observed divorce", ylab = "Predicted divorce")
abline(a = 0, b = 1, lty = 2)
for(i in 1:nrow(d)) lines(rep(d$D[i], 2), mu_PI[,i], col = rangi2)
identify(x = d$D, y = mu_mean, labels = d$Loc)
N <- 100 #number of cases
x_real <- rnorm(N) #x_real as Gaussian with mean  and 0 and stddev 1
x_spur <- rnorm(N, x_real) #x_spur as Gaussian with mean = x_real
y <- rnorm(N, x_real) #y as Gaussian with mean = x_real
d <- data.frame(y, x_real, x_spur) #bind all together in data frame
pairs(d)
#R code 5.19
#Posterior distribution of counterfactual outcomes for divorce model
data("WaffleDivorce")
d <- list()
d$A <- standardize(WaffleDivorce$MedianAgeMarriage)
d$D <- standardize(WaffleDivorce$Divorce)
d$M <- standardize(WaffleDivorce$Marriage)
m5.3_A <- quap(
alist(
## A -> D <- M
D ~ dnorm(mu, sigma),
mu <- a + bM * M + bA * A,
a <- dnorm(0, 0.2),
bM <- dnorm(0, 0.5),
bA <- dnorm(0, 0.5),
sigma <- dexp(1),
## A -> M
M ~ dnorm(mu_M, sigma_M),
mu_M <- aM + bAM * A,
aM ~ dnorm(0, 0.2),
bAM ~ dnorm(0, 0.5),
sigma_M <- dexp(1)), data = d)
precis(5.3A)
precis(m5.3A)
precis(m5.3_A)
A_seq <- seq(from = -2, to = 2, length.out = 30)
#prep data
sim_data <- data.frame(A = A_seq)
#simulate M and then D, using A_seq
s <- sim(m5.3_A, data = sim_data, vars=c("M", "D"))
plot(sim_data$A, colMeans(s$D), ylim = c(-2, 2), type = "l",
xlab = "manipulated A", ylab = "counterfactual D")
shade(apply(s$D, 2, PI), sim_data$A)
mtext("Total counterfactual effect of A on D")
sim_dat <- data.frame(A = A_seq)
#simulate M and then D, using A_seq
s <- sim(m5.3_A, data = sim_dat, vars=c("M", "D"))
################################################################################
#R code 5.22
#Plot the predictions
plot(sim_dat$A, colMeans(s$D), ylim = c(-2, 2), type = "l",
xlab = "manipulated A", ylab = "counterfactual D")
shade(apply(s$D, 2, PI), sim_dat$A)
mtext("Total counterfactual effect of A on D")
sim_dat <- data.frame(A = A_seq)
#simulate M and then D, using A_seq
s <- sim(m5.3_A, data = sim_dat, vars=c("M", "D"))
plot(sim_dat$A, colMeans(s$D), ylim = c(-2, 2), type = "l",
xlab = "manipulated A", ylab = "counterfactual D")
shade(apply(s$D, 2, PI), sim_dat$A)
mtext("Total counterfactual effect of A on D")
plot(sim_dat$A, colMeans(s$D), ylim = c(-2, 2), type = "l",
xlab = "manipulated A", ylab = "counterfactual D")
plot(sim_dat$A, colMeans(s$M), ylim = c(-2, 2), type = "l",
xlab = "manipulated A", ylab = "counterfactual M")
shade(apply(s$M, 2, PI), sim_dat$A)
mtext("Total counterfactual effect of A on M")
